{"ast":null,"code":"var _jsxFileName = \"/Users/davidduval/Documents/GitHub/Path-Finding-Visualizer/src/PathFindingVisualizer/PathFindingVisualizer.jsx\";\nimport React, { Component } from \"react\";\nimport Node from \"./Node/Node\";\nimport \"./PathFindingVisualizer.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 15;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 35;\nexport default class PathFidningVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      mouseIsPressed: false\n    };\n  }\n\n  componentDidMount() {\n    const grid = getInitialGrid();\n    this.setState({\n      grid\n    });\n  }\n\n  render() {\n    const {\n      nodes\n    } = this.state;\n    console.log(nodes);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid\",\n      children: [nodes.map((row, RowIdx) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: row.map((node, nodeIdx) => /*#__PURE__*/_jsxDEV(Node, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 49\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 24\n        }, this);\n      }), \"foo\", /*#__PURE__*/_jsxDEV(Node, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst getInitialGrid = () => {\n  const grid = [];\n\n  for (let row = 0; row < 20; row++) {\n    const currentRow = [];\n\n    for (let col = 0; col < 50; col++) {\n      currentRow.push(createNode(col, row));\n    }\n\n    grid.push(currentRow);\n  }\n\n  return grid;\n};\n\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null\n  };\n};","map":{"version":3,"sources":["/Users/davidduval/Documents/GitHub/Path-Finding-Visualizer/src/PathFindingVisualizer/PathFindingVisualizer.jsx"],"names":["React","Component","Node","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","PathFidningVisualizer","constructor","state","grid","mouseIsPressed","componentDidMount","getInitialGrid","setState","render","nodes","console","log","map","row","RowIdx","node","nodeIdx","currentRow","col","push","createNode","isStart","isFinish","distance","Infinity","isVisited","isWall","previousNode"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAQC,IAAR,MAAmB,aAAnB;AAEA,OAAO,6BAAP;;AAEA,MAAMC,cAAc,GAAG,EAAvB;AACA,MAAMC,cAAc,GAAG,EAAvB;AACA,MAAMC,eAAe,GAAG,EAAxB;AACA,MAAMC,eAAe,GAAG,EAAxB;AAEA,eAAe,MAAMC,qBAAN,SAAoCN,SAApC,CAA8C;AACzDO,EAAAA,WAAW,GAAG;AACV;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,IAAI,EAAE,EADK;AAEXC,MAAAA,cAAc,EAAE;AAFL,KAAb;AAKH;;AACDC,EAAAA,iBAAiB,GAAG;AAChB,UAAMF,IAAI,GAAGG,cAAc,EAA3B;AACA,SAAKC,QAAL,CAAc;AAACJ,MAAAA;AAAD,KAAd;AACD;;AAEHK,EAAAA,MAAM,GAAE;AACJ,UAAM;AAACC,MAAAA;AAAD,QAAU,KAAKP,KAArB;AACAQ,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,wBACI;AAAK,MAAA,SAAS,EAAG,MAAjB;AAAA,iBACCA,KAAK,CAACG,GAAN,CAAU,CAACC,GAAD,EAAMC,MAAN,KAAiB;AACxB,4BAAO;AAAA,oBACFD,GAAG,CAACD,GAAJ,CAAQ,CAACG,IAAD,EAAOC,OAAP,kBAAmB,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA,kBAA3B;AADE;AAAA;AAAA;AAAA;AAAA,gBAAP;AAGH,OAJA,CADD,sBAOA,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA,cAPA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAWH;;AA5BwD;;AAgC7D,MAAMV,cAAc,GAAG,MAAM;AACzB,QAAMH,IAAI,GAAG,EAAb;;AACA,OAAK,IAAIU,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,EAAxB,EAA4BA,GAAG,EAA/B,EAAmC;AACjC,UAAMI,UAAU,GAAG,EAAnB;;AACA,SAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,EAAxB,EAA4BA,GAAG,EAA/B,EAAmC;AACjCD,MAAAA,UAAU,CAACE,IAAX,CAAgBC,UAAU,CAACF,GAAD,EAAML,GAAN,CAA1B;AACD;;AACDV,IAAAA,IAAI,CAACgB,IAAL,CAAUF,UAAV;AACD;;AACD,SAAOd,IAAP;AACD,CAVH;;AAWE,MAAMiB,UAAU,GAAG,CAACF,GAAD,EAAML,GAAN,KAAc;AAC/B,SAAO;AACLK,IAAAA,GADK;AAELL,IAAAA,GAFK;AAGLQ,IAAAA,OAAO,EAAER,GAAG,KAAKjB,cAAR,IAA0BsB,GAAG,KAAKrB,cAHtC;AAILyB,IAAAA,QAAQ,EAAET,GAAG,KAAKf,eAAR,IAA2BoB,GAAG,KAAKnB,eAJxC;AAKLwB,IAAAA,QAAQ,EAAEC,QALL;AAMLC,IAAAA,SAAS,EAAE,KANN;AAOLC,IAAAA,MAAM,EAAE,KAPH;AAQLC,IAAAA,YAAY,EAAE;AART,GAAP;AAUD,CAXD","sourcesContent":["import React, { Component } from \"react\";\nimport  Node  from \"./Node/Node\";\n\nimport \"./PathFindingVisualizer.css\"\n\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 15;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 35;\n\nexport default class PathFidningVisualizer extends Component {\n    constructor() {\n        super();\n        this.state = {\n          grid: [],\n          mouseIsPressed: false,\n        };\n        \n    }\n    componentDidMount() {\n        const grid = getInitialGrid();\n        this.setState({grid});\n      }\n    \n    render(){\n        const {nodes} = this.state;\n        console.log(nodes);\n        return (\n            <div className = \"grid\">\n            {nodes.map((row, RowIdx) => {\n                return <div>\n                    {row.map((node, nodeIdx) => <Node></Node>)}\n                </div>\n            })}\n            foo\n            <Node></Node>\n            </div>\n        );\n    }\n\n\n}\nconst getInitialGrid = () => {\n    const grid = [];\n    for (let row = 0; row < 20; row++) {\n      const currentRow = [];\n      for (let col = 0; col < 50; col++) {\n        currentRow.push(createNode(col, row));\n      }\n      grid.push(currentRow);\n    }\n    return grid;\n  };\n  const createNode = (col, row) => {\n    return {\n      col,\n      row,\n      isStart: row === START_NODE_ROW && col === START_NODE_COL,\n      isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n      distance: Infinity,\n      isVisited: false,\n      isWall: false,\n      previousNode: null,\n    };\n  };"]},"metadata":{},"sourceType":"module"}