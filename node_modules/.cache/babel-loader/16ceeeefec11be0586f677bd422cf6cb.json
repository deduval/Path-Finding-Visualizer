{"ast":null,"code":"var _jsxFileName = \"/Users/davidduval/Documents/GitHub/Path-Finding-Visualizer/src/PathFindingVisualizer/PathFindingVisualizer.jsx\";\nimport React, { Component } from \"react\";\nimport Node from \"./Node/Node\";\nimport \"./PathFindingVisualizer.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 15;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 35;\nexport default class PathFidningVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      mouseIsPressed: false\n    };\n  }\n\n  componentDidMount() {\n    const grid = getInitialGrid();\n    this.setState({\n      grid\n    });\n  }\n\n  render() {\n    const {\n      nodes,\n      grid\n    } = this.state;\n    console.log(nodes);\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.visualizeDijkstra(),\n        children: \"Visualize Dijkstra's Algorithm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid\",\n        children: grid.map((row, rowIdx) => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: row.map((node, nodeIdx) => {\n              const {\n                row,\n                col,\n                isFinish,\n                isStart,\n                isWall\n              } = node;\n              return /*#__PURE__*/_jsxDEV(Node, {\n                children: [\"key=\", nodeIdx, \"col=\", col, \"isFinish=\", isFinish, \"isStart=\", isStart]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 39,\n                columnNumber: 27\n              }, this);\n            })\n          }, rowIdx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 21\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nconst getInitialGrid = () => {\n  const grid = [];\n\n  for (let row = 0; row < 20; row++) {\n    const currentRow = [];\n\n    for (let col = 0; col < 50; col++) {\n      currentRow.push(createNode(col, row));\n    }\n\n    grid.push(currentRow);\n  }\n\n  return grid;\n};\n\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null\n  };\n};","map":{"version":3,"sources":["/Users/davidduval/Documents/GitHub/Path-Finding-Visualizer/src/PathFindingVisualizer/PathFindingVisualizer.jsx"],"names":["React","Component","Node","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","PathFidningVisualizer","constructor","state","grid","mouseIsPressed","componentDidMount","getInitialGrid","setState","render","nodes","console","log","visualizeDijkstra","map","row","rowIdx","node","nodeIdx","col","isFinish","isStart","isWall","currentRow","push","createNode","distance","Infinity","isVisited","previousNode"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAQC,IAAR,MAAmB,aAAnB;AAEA,OAAO,6BAAP;;;AAEA,MAAMC,cAAc,GAAG,EAAvB;AACA,MAAMC,cAAc,GAAG,EAAvB;AACA,MAAMC,eAAe,GAAG,EAAxB;AACA,MAAMC,eAAe,GAAG,EAAxB;AAEA,eAAe,MAAMC,qBAAN,SAAoCN,SAApC,CAA8C;AACzDO,EAAAA,WAAW,GAAG;AACV;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,IAAI,EAAE,EADK;AAEXC,MAAAA,cAAc,EAAE;AAFL,KAAb;AAIH;;AACDC,EAAAA,iBAAiB,GAAG;AAChB,UAAMF,IAAI,GAAGG,cAAc,EAA3B;AACA,SAAKC,QAAL,CAAc;AAACJ,MAAAA;AAAD,KAAd;AACD;;AAEHK,EAAAA,MAAM,GAAE;AACJ,UAAM;AAACC,MAAAA,KAAD;AAAQN,MAAAA;AAAR,QAAgB,KAAKD,KAA3B;AACAQ,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,wBACI;AAAA,8BACE;AAAQ,QAAA,OAAO,EAAE,MAAM,KAAKG,iBAAL,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAIE;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA,kBACGT,IAAI,CAACU,GAAL,CAAS,CAACC,GAAD,EAAMC,MAAN,KAAiB;AACzB,8BACE;AAAA,sBACGD,GAAG,CAACD,GAAJ,CAAQ,CAACG,IAAD,EAAOC,OAAP,KAAmB;AAC1B,oBAAM;AAACH,gBAAAA,GAAD;AAAMI,gBAAAA,GAAN;AAAWC,gBAAAA,QAAX;AAAqBC,gBAAAA,OAArB;AAA8BC,gBAAAA;AAA9B,kBAAwCL,IAA9C;AACA,kCACE,QAAC,IAAD;AAAA,mCACWC,OADX,UAEWC,GAFX,eAGgBC,QAHhB,cAIeC,OAJf;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF;AAQD,aAVA;AADH,aAAUL,MAAV;AAAA;AAAA;AAAA;AAAA,kBADF;AAeD,SAhBA;AADH;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA,oBADJ;AA0BH;;AA1CwD;;AA8C7D,MAAMT,cAAc,GAAG,MAAM;AACzB,QAAMH,IAAI,GAAG,EAAb;;AACA,OAAK,IAAIW,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,EAAxB,EAA4BA,GAAG,EAA/B,EAAmC;AACjC,UAAMQ,UAAU,GAAG,EAAnB;;AACA,SAAK,IAAIJ,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,EAAxB,EAA4BA,GAAG,EAA/B,EAAmC;AACjCI,MAAAA,UAAU,CAACC,IAAX,CAAgBC,UAAU,CAACN,GAAD,EAAMJ,GAAN,CAA1B;AACD;;AACDX,IAAAA,IAAI,CAACoB,IAAL,CAAUD,UAAV;AACD;;AACD,SAAOnB,IAAP;AACD,CAVH;;AAYA,MAAMqB,UAAU,GAAG,CAACN,GAAD,EAAMJ,GAAN,KAAc;AAC7B,SAAO;AACLI,IAAAA,GADK;AAELJ,IAAAA,GAFK;AAGLM,IAAAA,OAAO,EAAEN,GAAG,KAAKlB,cAAR,IAA0BsB,GAAG,KAAKrB,cAHtC;AAILsB,IAAAA,QAAQ,EAAEL,GAAG,KAAKhB,eAAR,IAA2BoB,GAAG,KAAKnB,eAJxC;AAKL0B,IAAAA,QAAQ,EAAEC,QALL;AAMLC,IAAAA,SAAS,EAAE,KANN;AAOLN,IAAAA,MAAM,EAAE,KAPH;AAQLO,IAAAA,YAAY,EAAE;AART,GAAP;AAUD,CAXH","sourcesContent":["import React, { Component } from \"react\";\nimport  Node  from \"./Node/Node\";\n\nimport \"./PathFindingVisualizer.css\"\n\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 15;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 35;\n\nexport default class PathFidningVisualizer extends Component {\n    constructor() {\n        super();\n        this.state = {\n          grid: [],\n          mouseIsPressed: false,\n        };\n    }\n    componentDidMount() {\n        const grid = getInitialGrid();\n        this.setState({grid});\n      }\n    \n    render(){\n        const {nodes, grid} = this.state;\n        console.log(nodes);\n        return (\n            <>\n              <button onClick={() => this.visualizeDijkstra()}>\n                Visualize Dijkstra's Algorithm\n              </button>\n              <div className=\"grid\">\n                {grid.map((row, rowIdx) => {\n                  return (\n                    <div key={rowIdx}>\n                      {row.map((node, nodeIdx) => {\n                        const {row, col, isFinish, isStart, isWall} = node;\n                        return (\n                          <Node>\n                                key={nodeIdx}\n                                col={col}\n                                isFinish={isFinish}\n                                isStart={isStart}\n                          </Node>\n                        );\n                      })}\n                    </div>\n                  );\n                })}\n              </div>\n            </>\n          );\n    }\n\n\n}\nconst getInitialGrid = () => {\n    const grid = [];\n    for (let row = 0; row < 20; row++) {\n      const currentRow = [];\n      for (let col = 0; col < 50; col++) {\n        currentRow.push(createNode(col, row));\n      }\n      grid.push(currentRow);\n    }\n    return grid;\n  };\n\nconst createNode = (col, row) => {\n    return {\n      col,\n      row,\n      isStart: row === START_NODE_ROW && col === START_NODE_COL,\n      isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n      distance: Infinity,\n      isVisited: false,\n      isWall: false,\n      previousNode: null,\n    };\n  };"]},"metadata":{},"sourceType":"module"}